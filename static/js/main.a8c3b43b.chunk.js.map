{"version":3,"sources":["utils/firebase.ts","services/FirebaseService.ts","utils/currencies.ts","utils/urls.ts","views/AccountForm.tsx","views/AccountList.tsx","views/components/Select.tsx","views/AccountTransaction.tsx","views/AccountTransactionsList.tsx","views/AccountTransfer.tsx","views/components/EntryOrOut.tsx","views/AccountEntry.tsx","views/AccountOut.tsx","views/Home.tsx","views/AccountReport.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebaseDatabase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","FirebaseService","getDataList","nodePath","callback","query","ref","on","dataSnapshot","snap","val","newData","Object","keys","forEach","key","push","pushData","node","objToSubmit","id","set","remove","concat","getUniqueDataBy","once","then","updateData","obj","objectSpread","currencies","code","singular","plural","path","urls","accountsTransaction","name","accountsTransfer","accountsList","accountsEntry","accountsOut","accountsForm","accountsEdit","report","simplePath","home","accountTransactionsList","InitialState","loading","description","balances","Array","currency","value","AccountsForm","state","componentWillMount","_this","getDate","props","match","params","data","setState","onAddBalance","_this$state","handleAdd","submit","event","preventDefault","_this$state2","newId","history","_this2","this","_this$state3","react_default","a","createElement","Fragment","core","style","marginLeft","marginRight","marginTop","variant","component","onSubmit","clear","float","display","type","label","fullWidth","required","onChange","e","target","color","alignItems","htmlFor","width","find","inputProps","map","option","onClick","length","align","balance","_ref","l10n","Intl","NumberFormat","format","Component","AccountList","accounts","viewList","onSearch","filter","indexOf","placeholder","cellHeight","cols","account","margin","withWidth","Select","selectDefault","items","itemKey","displayEmpty","item","AccountTransaction","currencyFrom","currencyTo","from","to","quotation","quantity","addTransaction","isFrom","accountTo","accountFrom","some","transactions","date","Date","toISOString","sended","oldBalancesFrom","oldBalancesTo","newBalancesFrom","newBalancesTo","promises","Promise","all","getAccountMessage","isSelected","text","findCurrencyByCode","getFormatedCurrency","getMonetaryItems","balancesFrom","balancesTo","monetaryFromMsg","monetaryFromItens","monetaryToMsg","monetaryToItens","sellCurrency","paddingBottom","components_Select","AccountTransactionsList","sortFunction","b","_ref$balances","reduce","acc","padding","flexGrow","sort","transaction","index","moment","AccountTransfer","console","log","disabled","isEntry","newBalances","oldBalances","AccountEntry","EntryOrOut_AccountTransaction","assign","AccountOut","menuItems","Home","MenuRenderer","menuItem","AccountReport","filtredTransactions","totalValue","sum","quotationAvarage","backgroundColor","fontWeight","App","position","marginBottom","aria-label","react_router_dom","Menu_default","react_router","exact","render","views_Home","AccountForm","views_AccountList","AccountTransaction_AccountTransaction","views_AccountTransactionsList","AccountTransfer_AccountTransfer","AccountEntry_AccountEntry","AccountOut_AccountOut","views_AccountReport","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8c3b43b.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst config = {\n  apiKey: \"AIzaSyAAEydqTs7fZg30Q4JRcqYG99ttG4QwiwE\",\n  authDomain: \"monetary-47f4a.firebaseapp.com\",\n  databaseURL: \"https://monetary-47f4a.firebaseio.com\",\n  projectId: \"monetary-47f4a\",\n  storageBucket: \"monetary-47f4a.appspot.com\",\n  messagingSenderId: \"324201016162\",\n  appId: \"1:324201016162:web:3eb5ffcbf1fdad7f\"\n};\n\nexport const firebaseImpl = firebase.initializeApp(config);\nexport const firebaseDatabase = firebase.database();","import { firebaseDatabase } from '../utils/firebase';\n\nexport default class FirebaseService {\n  static getDataList = (nodePath: string, callback: Function) => {\n\n    const query = firebaseDatabase.ref(nodePath);\n\n    query.on('value', (dataSnapshot) => {\n      const snap = dataSnapshot.val();\n      const newData: any = [];\n      const keys = Object.keys(snap || {});\n      keys.forEach((key) => {\n        newData.push(snap[key]);\n      });\n      callback(newData);\n    });\n\n    return query;\n  };\n\n  static pushData = (node: string, objToSubmit: any) => {\n    const ref = firebaseDatabase.ref(node).push();\n    const id = ref.key;\n    ref.set(objToSubmit);\n    return id;\n  };\n\n  static remove = (id: string, node: string) => {\n    return firebaseDatabase.ref(`${node}/${id}`).remove();\n  };\n\n  static getUniqueDataBy = (node: string, id: string, callback: Function) => {\n    const ref = firebaseDatabase.ref(node + '/' + id);\n    let newData: any = {};\n\n    ref.once('value', (dataSnapshot) => {\n      if (!dataSnapshot) {\n        callback(null);\n        return;\n      }\n      const snap = dataSnapshot.val();\n      const keys = Object.keys(snap || {});\n      keys.forEach((key) => {\n        newData[key] = snap[key]\n      });\n    }).then(() => {\n      callback(newData);\n    });\n  };\n\n  static updateData = (id: string, node: string, obj: any) => {\n    return firebaseDatabase.ref(`${node}/${id}`).set({ ...obj });\n  };\n}\n","export default [\n  {\n    code: 'USD',\n    singular: 'Dólar Americano',\n    plural: 'Dólares Americano',\n  }, {\n    code: 'BRL',\n    singular: 'Real',\n    plural: 'Reais',\n  }, {\n    code: 'EUR',\n    singular: 'Euro',\n    plural: 'Euros',\n  }, {\n    code: 'ARS',\n    singular: 'Peso Argentino',\n    plural: 'Pesos Argentino',\n  }, {\n    code: 'CAD',\n    singular: 'Dólar Canadense',\n    plural: 'Dólares Canadense',\n  }, {\n    code: 'GBP',\n    singular: 'Libra Esterlina',\n    plural: 'Libras Esterlina',\n  },\n]","const path = '/monetary';\n// const path = \"\";\n\nexport default {\n  accountsTransaction: {\n    name: \"Fazer uma transação de moedas\",\n    path: `${path}/accounts-transaction`\n  },\n  accountsTransfer: {\n    name: \"Fazer uma transferência entre contas\",\n    path: `${path}/accounts-transfer`\n  },\n  accountsList: { name: \"Listagem de carteiras\", path: `${path}/accounts` },\n  accountsEntry: {\n    name: \"Registrar uma entrada\",\n    path: `${path}/accounts-entry`\n  },\n  accountsOut: { name: \"Registrar uma saída\", path: `${path}/accounts-out` },\n  accountsForm: { name: \"Cadastro de carteira\", path: `${path}/account` }\n};\n\nexport const accountsEdit = {\n  name: \"Edição de carteira\",\n  path: `${path}/account/:id`\n};\n\nexport const report = {\n  name: \"Relatório\",\n  path: `${path}/report/:id/:code`,\n  simplePath: `${path}/report`\n}\n\nexport const home = {\n  name: \"Home\",\n  path: `${path}/`\n};\n\nexport const accountTransferList = {\n  name: \"Listagem de transferências\",\n  path: `${path}/account-transfer-list/:id'`\n};\n\nexport const accountTransactionsList = {\n  name: \"Listagem de transações\",\n  path: `${path}/account-transaction-list/:id`,\n  simplePath: `${path}/account-transaction-list/`\n};\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  Select,\n  MenuItem,\n  InputLabel,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow\n} from \"@material-ui/core/index\";\nimport FirebaseService from \"../services/FirebaseService\";\nimport currencies from \"../utils/currencies\";\nimport urls from \"../utils/urls\";\n\ninterface Balance {\n  code: string;\n  value: number;\n}\n\ninterface Currency {\n  code: string;\n  singular: string;\n}\n\ninterface State {\n  id?: string | null;\n  description: string;\n  balances: Array<Balance>;\n  currency: Currency;\n  value: number;\n  loading: boolean;\n}\n\ninterface Props {\n  match?: any;\n  history?: any;\n}\n\nconst InitialState = {\n  loading: true,\n  id: null,\n  description: \"\",\n  balances: new Array<Balance>(),\n  currency: { code: \"\", singular: \"\" },\n  value: 0\n};\n\nclass AccountsForm extends Component<Props, State> {\n  public readonly state = InitialState;\n\n  componentWillMount = () => {\n    this.getDate();\n  };\n\n  getDate = () => {\n    const { id } = this.props.match.params;\n    if (id) {\n      FirebaseService.getUniqueDataBy(\"accounts\", id, (data: any) => {\n        this.setState({\n          ...data,\n          id,\n          currency: { code: \"\", singular: \"\" },\n          value: 0,\n          loading: false\n        });\n      });\n    } else {\n      this.setState({ loading: false });\n    }\n  };\n\n  onAddBalance = () => {\n    const { value, currency, balances } = this.state;\n    this.setState(\n      { balances: balances.concat([{ value: value, code: currency.code }]) },\n      this.handleAdd\n    );\n  };\n\n  submit = (event: any) => {\n    event.preventDefault();\n    this.handleAdd();\n  };\n\n  handleAdd = () => {\n    const { id, description, balances } = this.state;\n\n    if (!!id) {\n      // @ts-ignore\n      FirebaseService.updateData(id, \"accounts\", {\n        id,\n        description,\n        balances\n      }).then(this.getDate);\n    } else {\n      const newId = FirebaseService.pushData(\"accounts\", {\n        description,\n        balances\n      });\n      if (newId) {\n        FirebaseService.updateData(newId, \"accounts\", {\n          id: newId,\n          description,\n          balances\n        }).then(() =>\n          this.props.history.push(`${urls.accountsForm.path}/${newId}`)\n        );\n      }\n    }\n  };\n\n  render() {\n    const { id, description, currency, value, balances, loading } = this.state;\n    const code = currency.code || \"\";\n\n    if (loading) return null;\n\n    return (\n      <React.Fragment>\n        <Card style={{ marginLeft: \"2%\", marginRight: \"2%\", marginTop: \"2%\" }}>\n          <CardContent>\n            <Typography variant=\"headline\" component=\"h2\">\n              {!!id\n                ? `Editar a conta '${description}'`\n                : \"Adicionar nova conta\"}\n            </Typography>\n\n            <form onSubmit={this.submit}>\n              <TextField\n                style={{\n                  clear: \"left\",\n                  float: \"left\",\n                  display: \"inline-block\",\n                  marginTop: \"2vh !important\"\n                }}\n                type=\"text\"\n                value={description}\n                label=\"Descrição\"\n                fullWidth\n                required\n                onChange={e => this.setState({ description: e.target.value })}\n              />\n\n              <Button\n                type=\"submit\"\n                color=\"primary\"\n                style={{ marginTop: \"20px\", display: \"inline-block\" }}\n              >\n                {!!id ? \"Editar conta\" : \"Adicionar conta\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n        {!!id && (\n          <Card\n            style={{ marginLeft: \"2%\", marginRight: \"2%\", marginTop: \"2%\" }}\n          >\n            <CardContent>\n              <Typography variant=\"headline\" component=\"h2\">\n                Adicionar saldo\n              </Typography>\n              <div style={{ display: \"flex\", alignItems: \"baseline\" }}>\n                <InputLabel htmlFor=\"currency-select\">Moeda</InputLabel>\n                <Select\n                  style={{ width: 200, marginRight: 8 }}\n                  value={code}\n                  onChange={e => {\n                    const currency = currencies.find(\n                      currency => currency.code === e.target.value\n                    );\n                    if (currency) {\n                      this.setState({\n                        currency: {\n                          code: currency.code,\n                          singular: currency.singular\n                        }\n                      });\n                    }\n                  }}\n                  inputProps={{\n                    name: \"currency\",\n                    id: \"currency-select\"\n                  }}\n                >\n                  <MenuItem value=\"\">\n                    <em>Selecione uma moeda</em>\n                  </MenuItem>\n                  {currencies.map(option => (\n                    <MenuItem value={option.code}>{option.singular}</MenuItem>\n                  ))}\n                </Select>\n                <TextField\n                  type=\"number\"\n                  value={value}\n                  label=\"Saldo\"\n                  required\n                  onChange={e => this.setState({ value: +e.target.value })}\n                />\n              </div>\n              <Button\n                onClick={this.onAddBalance}\n                color=\"primary\"\n                style={{ marginTop: \"20px\", display: \"inline-block\" }}\n              >\n                Adicionar\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n        {!!balances.length && (\n          <Card\n            style={{ marginLeft: \"2%\", marginRight: \"2%\", marginTop: \"2%\" }}\n          >\n            <CardContent>\n              <Typography variant=\"headline\" component=\"h2\">\n                Saldos vinculados na conta\n              </Typography>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Moeda</TableCell>\n                    <TableCell align=\"right\">Saldo</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {balances.map(balance => {\n                    const currency = currencies.find(\n                      ({ code }) => code === balance.code\n                    );\n                    const l10n = new Intl.NumberFormat(\"pt-BR\", {\n                      style: \"currency\",\n                      currency: balance.code\n                    });\n                    return (\n                      <TableRow key={balance.code}>\n                        <TableCell align=\"left\">\n                          {!!currency && currency.singular}\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          {l10n.format(balance.value)}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AccountsForm;\n","import React, { Component } from \"react\";\nimport {\n  GridList,\n  GridListTile,\n  Card,\n  CardContent,\n  Typography,\n  Input,\n  Button\n} from \"@material-ui/core/index\";\nimport withWidth from \"@material-ui/core/withWidth\";\nimport FirebaseService from \"../services/FirebaseService\";\nimport urls, { accountTransactionsList } from \"../utils/urls\";\n\ninterface Balance {\n  code: string;\n  value: number;\n}\n\ninterface Account {\n  id: string;\n  description: string;\n  balances: Array<Balance>;\n}\n\ninterface State {\n  accounts: Array<Account>;\n  viewList: Array<Account>;\n  loading: boolean;\n}\n\nclass AccountList extends Component<any, State> {\n  public readonly state = {\n    accounts: new Array<Account>(),\n    viewList: new Array<Account>(),\n    loading: true\n  };\n\n  componentWillMount = () => {\n    FirebaseService.getDataList(\"accounts\", (data: any) => {\n      this.setState({ accounts: data, viewList: data, loading: false });\n    });\n  };\n\n  onSearch = (event: any) => {\n    const { accounts } = this.state;\n    if (event && event.target && event.target.value) {\n      this.setState({\n        viewList: accounts.filter(\n          ({ description }) => description.indexOf(event.target.value) >= 0\n        )\n      });\n    } else {\n      this.setState({ viewList: accounts });\n    }\n  };\n\n  render() {\n    const { viewList, loading } = this.state;\n    if (loading) return null;\n\n    const getGridListCols = () => {\n      if (this.props.width === \"xs\") {\n        return 4;\n      }\n      if (this.props.width === \"sm\") {\n        return 2;\n      }\n      if (this.props.width === \"md\") {\n        return 2;\n      }\n      return 1;\n    };\n\n    return (\n      <React.Fragment>\n        <Input\n          type=\"search\"\n          placeholder=\"Buscar...\"\n          style={{ marginLeft: \"10%\", marginRight: \"10%\", width: \"80%\" }}\n          onChange={e => this.onSearch(e)}\n        />\n        <GridList cellHeight={150} cols={4}>\n          {viewList.map((account: Account) => (\n            <GridListTile key={account.id} cols={getGridListCols()}>\n              <Card style={{ margin: 16 }}>\n                <CardContent>\n                  <Typography variant=\"headline\" component=\"h2\">\n                    {account.description}\n                  </Typography>\n                  <Typography>{`Moedas: ${\n                    (account.balances || []).length\n                  }`}</Typography>\n                  <Button\n                    color=\"inherit\"\n                    onClick={() =>\n                      this.props.history.push(\n                        `${urls.accountsForm.path}/${account.id}`\n                      )\n                    }\n                  >\n                    Editar\n                  </Button>\n                  <Button\n                    color=\"primary\"\n                    onClick={() =>\n                      this.props.history.push(\n                        `${accountTransactionsList.simplePath}${account.id}`\n                      )\n                    }\n                  >\n                    Ver transações\n                  </Button>\n                </CardContent>\n              </Card>\n            </GridListTile>\n          ))}\n        </GridList>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withWidth()(AccountList);\n","import React from \"react\";\nimport { Select as MSelect, MenuItem } from \"@material-ui/core/index\";\n\ninterface Props {\n  value: string;\n  onChange: Function;\n  name: string;\n  selectDefault: string;\n  items: Array<any>;\n  itemKey?: string;\n}\n\nconst Select: React.SFC<Props> = props => {\n  const { value, onChange, name, selectDefault, items, itemKey } = props;\n  return (\n    <MSelect\n      value={value}\n      onChange={e => onChange(e.target.value)}\n      displayEmpty\n      fullWidth\n      name={name}\n      style={{\n        marginTop: 16\n      }}\n    >\n      <MenuItem value=\"\">\n        <em>{selectDefault}</em>\n      </MenuItem>\n      {items.map(item => (\n        <MenuItem value={item.id}>{item[itemKey || \"description\"]}</MenuItem>\n      ))}\n    </MSelect>\n  );\n};\n\nexport default Select;\n","import React, { Component } from \"react\";\nimport {\n  Typography,\n  Card,\n  CardContent,\n  TextField,\n  Button\n} from \"@material-ui/core/index\";\n\nimport Select from \"./components/Select\";\n\nimport FirebaseService from \"../services/FirebaseService\";\nimport currencies from \"../utils/currencies\";\nimport urls from \"../utils/urls\";\n\ninterface Transaction {\n  date: string;\n  description: string;\n  value: number;\n  currency: string;\n  quotation: number;\n  to: string;\n  from: string;\n  sended: boolean;\n  type: string;\n}\n\ninterface Balance {\n  code: string;\n  value: number;\n  transactions: Array<Transaction>;\n}\n\ninterface Account {\n  id: string;\n  description: string;\n  balances: Array<Balance>;\n}\n\ninterface State {\n  from: string;\n  to: string;\n  currencyFrom: string;\n  currencyTo: string;\n  accounts: Array<Account>;\n  loading: boolean;\n  description: string;\n  quantity: number;\n  quotation: number;\n}\n\nexport default class AccountTransaction extends Component<any, State> {\n  public readonly state = {\n    loading: true,\n    accounts: new Array<Account>(),\n    currencyFrom: \"\",\n    currencyTo: \"\",\n    from: \"\",\n    to: \"\",\n    quotation: 0,\n    quantity: 0,\n    description: \"\"\n  };\n\n  componentWillMount = () => {\n    FirebaseService.getDataList(\"accounts\", (data: any) => {\n      this.setState({ accounts: data, loading: false });\n    });\n  };\n\n  addTransaction = (\n    isFrom: boolean,\n    balances: Array<Balance>,\n    currencyFrom: string,\n    currencyTo: string,\n    quantity: number,\n    quotation: number,\n    description: string,\n    accountTo: string,\n    accountFrom: string\n  ) => {\n    if (!balances.some(balance => balance.code === currencyFrom)) {\n      balances.push({\n        code: currencyFrom,\n        value: 0,\n        transactions: new Array<Transaction>()\n      });\n    }\n    if (!balances.some(balance => balance.code === currencyTo)) {\n      balances.push({\n        code: currencyTo,\n        value: 0,\n        transactions: new Array<Transaction>()\n      });\n    }\n    return balances.map(balance => {\n      if (balance.code === currencyFrom) {\n        const transactions = balance.transactions || new Array<Transaction>();\n        const value = quantity * quotation;\n        return {\n          ...balance,\n          value: isFrom ? balance.value - value : balance.value + value,\n          transactions: transactions.concat([\n            {\n              date: new Date().toISOString(),\n              type: \"TRANSACTION\",\n              quotation,\n              sended: isFrom,\n              value,\n              currency: currencyFrom,\n              to: accountTo,\n              from: accountFrom,\n              description\n            }\n          ])\n        };\n      }\n      if (balance.code === currencyTo) {\n        const transactions = balance.transactions || new Array<Transaction>();\n        const value = quantity;\n        return {\n          ...balance,\n          value: isFrom ? balance.value + value : balance.value - value,\n          transactions: transactions.concat([\n            {\n              date: new Date().toISOString(),\n              type: \"TRANSACTION\",\n              quotation,\n              sended: !isFrom,\n              value,\n              currency: currencyTo,\n              to: accountTo,\n              from: accountFrom,\n              description\n            }\n          ])\n        };\n      }\n      return balance;\n    });\n  };\n\n  submit = (event: any) => {\n    event.preventDefault();\n    const {\n      accounts,\n      from,\n      to,\n      description,\n      quotation,\n      quantity,\n      currencyFrom,\n      currencyTo\n    } = this.state;\n    const accountFrom = accounts.find(account => account.id === from);\n    const accountTo = accounts.find(account => account.id === to);\n\n    if (accountFrom && accountTo) {\n      const oldBalancesFrom = accountFrom.balances || new Array<Balance>();\n      const oldBalancesTo = accountTo.balances || new Array<Balance>();\n      const newBalancesFrom = this.addTransaction(\n        true,\n        oldBalancesFrom,\n        currencyFrom,\n        currencyTo,\n        quantity,\n        quotation,\n        description,\n        to,\n        from\n      );\n      const newBalancesTo = this.addTransaction(\n        false,\n        oldBalancesTo,\n        currencyFrom,\n        currencyTo,\n        quantity,\n        quotation,\n        description,\n        to,\n        from\n      );\n\n      const promises = [\n        FirebaseService.updateData(from, \"accounts\", {\n          ...accountFrom,\n          balances: newBalancesFrom\n        }),\n        FirebaseService.updateData(to, \"accounts\", {\n          ...accountTo,\n          balances: newBalancesTo\n        })\n      ];\n\n      Promise.all(promises).then(() =>\n        this.props.history.push(urls.accountsList.path)\n      );\n    }\n  };\n\n  getAccountMessage = (isSelected: boolean, text: string): string => {\n    if (isSelected) {\n      return `Selecione a moeda que sairá da conta ${text}`;\n    }\n    return \"Selecione a moeda que sairá da conta\";\n  };\n\n  findCurrencyByCode = (code: string) => {\n    return (\n      (!!code && currencies.find(currency => currency.code === code)) || {\n        code: \"\",\n        singular: \"\",\n        plural: \"\"\n      }\n    );\n  };\n\n  getFormatedCurrency = (value: number, code: string) => {\n    const l10n = new Intl.NumberFormat(\"pt-BR\", {\n      style: \"currency\",\n      currency: code\n    });\n    return l10n.format(value);\n  };\n\n  getMonetaryItems = (balances: Array<Balance>) => {\n    return balances.map((balance: Balance) => {\n      const currency = this.findCurrencyByCode(balance.code);\n      return {\n        id: balance.code,\n        description: `${\n          currency ? currency.singular : balance.code\n        } (Valor máximo: ${this.getFormatedCurrency(\n          balance.value,\n          balance.code\n        )})`\n      };\n    });\n  };\n\n  render() {\n    const {\n      loading,\n      accounts,\n      from,\n      to,\n      currencyFrom,\n      currencyTo,\n      quotation,\n      quantity,\n      description\n    } = this.state;\n\n    const accountFrom = !!from && accounts.find(account => account.id === from);\n    const accountTo = !!to && accounts.find(account => account.id === to);\n    const balancesFrom =\n      accountFrom && accountFrom.balances ? accountFrom.balances : [];\n    const balancesTo =\n      accountTo && accountTo.balances ? accountTo.balances : [];\n\n    const monetaryFromMsg = this.getAccountMessage(\n      !!from,\n      //@ts-ignore\n      accountFrom.description\n    );\n\n    const monetaryFromItens = this.getMonetaryItems(balancesFrom);\n\n    const monetaryToMsg = this.getAccountMessage(\n      !!to,\n      //@ts-ignore\n      accountTo.description\n    );\n\n    const monetaryToItens = this.getMonetaryItems(balancesTo);\n\n    const sellCurrency = this.findCurrencyByCode(currencyTo);\n\n    if (loading) return null;\n\n    return (\n      <div style={{ paddingBottom: 16 }}>\n        <form onSubmit={this.submit}>\n          <Card\n            style={{ marginLeft: \"2%\", marginRight: \"2%\", marginTop: \"2%\" }}\n          >\n            <CardContent>\n              <Typography variant=\"headline\" component=\"h2\">\n                Carteira compradora\n              </Typography>\n              <Select\n                value={from}\n                onChange={(value: any) =>\n                  this.setState({ from: value, currencyFrom: \"\" })\n                }\n                name=\"De\"\n                selectDefault=\"Selecione a carteira de compra\"\n                items={accounts}\n              />\n\n              <Select\n                value={currencyFrom}\n                onChange={(value: any) =>\n                  this.setState({ currencyFrom: value })\n                }\n                name=\"Moeda da carteira de compra\"\n                selectDefault={monetaryFromMsg}\n                items={monetaryFromItens}\n              />\n            </CardContent>\n          </Card>\n          <Card\n            style={{ marginLeft: \"2%\", marginRight: \"2%\", marginTop: \"2%\" }}\n          >\n            <CardContent>\n              <Typography variant=\"headline\" component=\"h2\">\n                Carteira vendedora\n              </Typography>\n              <Select\n                value={to}\n                onChange={(value: any) =>\n                  this.setState({ to: value, currencyTo: \"\" })\n                }\n                name=\"Para\"\n                selectDefault=\"Selecione carteira vendedora\"\n                items={accounts}\n              />\n              <Select\n                value={currencyTo}\n                onChange={(value: any) => this.setState({ currencyTo: value })}\n                name=\"Moeda da carteira vendedora\"\n                selectDefault={monetaryToMsg}\n                items={monetaryToItens}\n              />\n            </CardContent>\n          </Card>\n          {!!(from && to && currencyFrom && currencyTo) && (\n            <Card\n              style={{ marginLeft: \"2%\", marginRight: \"2%\", marginTop: \"2%\" }}\n            >\n              <CardContent>\n                <Typography variant=\"headline\" component=\"h2\">\n                  Valor e cotação\n                </Typography>\n                <TextField\n                  type=\"number\"\n                  value={quantity}\n                  label={`Quantidade de ${\n                    sellCurrency.plural\n                  } que será vendido`}\n                  fullWidth\n                  required\n                  style={{\n                    marginTop: 16\n                  }}\n                  onChange={e => this.setState({ quantity: +e.target.value })}\n                />\n                <TextField\n                  type=\"number\"\n                  value={quotation}\n                  label={`Cotação do ${\n                    sellCurrency.singular\n                  } que será usado na venda`}\n                  fullWidth\n                  required\n                  style={{\n                    marginTop: 16\n                  }}\n                  onChange={e => this.setState({ quotation: +e.target.value })}\n                />\n                <TextField\n                  type=\"text\"\n                  value={description}\n                  label=\"Descrição\"\n                  fullWidth\n                  style={{\n                    marginTop: 16\n                  }}\n                  onChange={e => this.setState({ description: e.target.value })}\n                />\n              </CardContent>\n            </Card>\n          )}\n          {!!(\n            from &&\n            to &&\n            currencyFrom &&\n            currencyTo &&\n            quantity &&\n            quotation\n          ) && (\n            <Card\n              style={{ marginLeft: \"2%\", marginRight: \"2%\", marginTop: \"2%\" }}\n            >\n              <CardContent>\n                <Typography variant=\"headline\" component=\"h2\">\n                  Resumo e confirmação\n                </Typography>\n                <br />\n                <Typography>\n                  {`Será transferido ${this.getFormatedCurrency(\n                    quantity,\n                    currencyTo\n                  )} da conta  \"${\n                    accountTo ? accountTo.description : \"\"\n                  }\" e adicionado na conta \"${\n                    accountFrom ? accountFrom.description : \"\"\n                  }\". E será transferido ${this.getFormatedCurrency(\n                    quantity * quotation,\n                    currencyFrom\n                  )} da conta \"${\n                    accountFrom ? accountFrom.description : \"\"\n                  }\" e adicionado na conta \"${\n                    accountTo ? accountTo.description : \"\"\n                  }\"`}\n                </Typography>\n\n                <Button\n                  type=\"submit\"\n                  color=\"primary\"\n                  style={{ marginTop: \"20px\", display: \"inline-block\" }}\n                >\n                  Transferir\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport {\n  Typography,\n  Card,\n  CardContent,\n  GridListTile,\n  GridList,\n  Table,\n  TableHead,\n  TableBody,\n  TableCell,\n  Button,\n  TableRow\n} from \"@material-ui/core/index\";\nimport FirebaseService from \"../services/FirebaseService\";\nimport currencies from \"../utils/currencies\";\nimport withWidth from \"@material-ui/core/withWidth\";\nimport moment from \"moment\";\nimport { report } from \"../utils/urls\";\n\ninterface Transaction {\n  date: Date;\n  description: string;\n  value: number;\n  currency: string;\n  to: string;\n  from: string;\n  sended: boolean;\n  type: string;\n}\n\ninterface Balance {\n  code: string;\n  value: number;\n  transactions: Array<Transaction>;\n}\n\ninterface Account {\n  id: string;\n  description: string;\n  balances: Array<Balance> | null;\n}\ninterface State {\n  account: Account | null;\n  loading: boolean;\n}\n\nclass AccountTransactionsList extends Component<any, State> {\n  public readonly state = { account: null, loading: true };\n\n  componentWillMount = () => {\n    const { id } = this.props.match.params;\n\n    FirebaseService.getUniqueDataBy(\"accounts\", id, (data: Account) => {\n      this.setState({ account: { ...data, id }, loading: false });\n    });\n  };\n\n  //@ts-ignore\n  sortFunction = (a: Transaction, b: Transaction) => + (b.date > a.date) - (b.date < a.date);\n\n  render() {\n    const { account, loading } = this.state;\n\n    if (loading || !account) return null;\n\n    const getGridListCols = () => {\n      if (this.props.width === \"xs\") {\n        return 4;\n      }\n      if (this.props.width === \"sm\") {\n        return 2;\n      }\n      if (this.props.width === \"md\") {\n        return 2;\n      }\n      return 1;\n    };\n    //@ts-ignore\n    const { balances = [], id } = account || {};\n    const transactions = (balances || []).reduce(\n      //@ts-ignore\n      (acc, value: Balance) => acc.concat(value.transactions || []),\n      new Array<Transaction>()\n    );\n    return (\n      <div style={{ paddingBottom: 16 }}>\n        {!!balances && !!balances.length && (\n          <React.Fragment>\n            <Typography\n              style={{ padding: 8 }}\n              variant=\"headline\"\n              component=\"h2\"\n            >\n              Moedas vincuadas a essa conta\n            </Typography>\n            <GridList cellHeight={110} cols={4}>\n              {balances.map((balance: Balance) => {\n                const l10n = new Intl.NumberFormat(\"pt-BR\", {\n                  style: \"currency\",\n                  currency: balance.code\n                });\n                const currency = currencies.find(\n                  currency => currency.code === balance.code\n                );\n                return (\n                  <GridListTile key={balance.code} cols={getGridListCols()}>\n                    <Card style={{ margin: 2 }}>\n                      <CardContent>\n                        <div style={{ display: 'flex' }}>\n                          <div style={{ flexGrow: 1 }}>\n                            <Typography variant=\"headline\" component=\"h2\">\n                              {currency ? currency.singular : balance.code}\n                            </Typography>\n                            <Typography>{`Valor: ${l10n.format(\n                              balance.value\n                            )}`}</Typography>\n                          </div>\n                          <div style={{ flexGrow: 0 }}>\n                            <Button onClick={() => this.props.history.push(`${report.simplePath}/${id}/${balance.code}`)}>Relatório</Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </GridListTile>\n                );\n              })}\n            </GridList>\n          </React.Fragment>\n        )}\n        {!!transactions && !!transactions.length && (\n          <React.Fragment>\n            <Typography\n              style={{ padding: 8 }}\n              variant=\"headline\"\n              component=\"h2\"\n            >\n              Movimentações vinculadas com essa conta\n            </Typography>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Data</TableCell>\n                  <TableCell>Moeda</TableCell>\n                  <TableCell>Valor</TableCell>\n                  <TableCell>Tipo</TableCell>\n                  <TableCell>Descrição</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {transactions.sort(this.sortFunction).map((transaction: Transaction, index: number) => {\n                  const l10n = new Intl.NumberFormat(\"pt-BR\", {\n                    style: \"currency\",\n                    currency: transaction.currency\n                  });\n                  let type;\n                  if (transaction.type === 'INITIAL') {\n                    type = 'Depósto inicial';\n                  } else if (transaction.type === 'MOVEMENT') {\n                    if (transaction.sended) type = 'Saída';\n                    if (!transaction.sended) type = 'Entrada';\n                  } else if (transaction.type === 'TRANSFER') {\n                    if (transaction.sended) type = 'Transferência - Saída';\n                    if (!transaction.sended) type = 'Transferência - Entrada';\n                  } else if (transaction.type === 'TRANSACTION') {\n                    if (transaction.sended) type = 'Compra - Saída';\n                    if (!transaction.sended) type = 'Compra - Entrada';\n                  }\n\n                  return (\n                    <TableRow\n                      key={transaction.currency + transaction.date + index}\n                      \n                    >\n                      <TableCell style={transaction.sended ? {color: 'red'} : {}} >{moment(transaction.date).format(\"DD/MM/YYYY HH:MM\")}</TableCell>\n                      <TableCell style={transaction.sended ? {color: 'red'} : {}}>{transaction.currency}</TableCell>\n                      <TableCell style={transaction.sended ? {color: 'red'} : {}}>{l10n.format(transaction.value)}</TableCell>\n                      <TableCell style={transaction.sended ? {color: 'red'} : {}}>{type}</TableCell>\n                      <TableCell style={transaction.sended ? {color: 'red'} : {}}>{transaction.description}</TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withWidth()(AccountTransactionsList);\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  TextField,\n  Typography,\n  Card,\n  CardContent,\n  Select,\n  MenuItem\n} from \"@material-ui/core/index\";\nimport FirebaseService from \"../services/FirebaseService\";\nimport currencies from \"../utils/currencies\";\nimport urls from \"../utils/urls\";\n\ninterface Transfer {\n  date: string;\n  description: string;\n  value: number;\n  currency: string;\n  to: string;\n  from: string;\n  sended: boolean;\n  type: string;\n}\n\ninterface Balance {\n  code: string;\n  value: number;\n  transactions: Array<Transfer>;\n}\n\ninterface Account {\n  id: string;\n  description: string;\n  balances: Array<Balance>;\n}\n\ninterface State {\n  accounts: Array<Account>;\n  loading: boolean;\n  from: string;\n  to: string;\n  currency: string;\n  description: string;\n  value: number;\n}\n\nexport default class AccountTransfer extends Component<any, State> {\n  public readonly state = {\n    loading: true,\n    accounts: new Array<Account>(),\n    from: \"\",\n    to: \"\",\n    value: 0,\n    description: \"\",\n    currency: \"\"\n  };\n\n  componentWillMount = () => {\n    FirebaseService.getDataList(\"accounts\", (data: any) => {\n      this.setState({ accounts: data, loading: false });\n    });\n  };\n\n  submit = (event: any) => {\n    event.preventDefault();\n    const { accounts, from, to, description, value, currency } = this.state;\n    const accountFrom = accounts.find(account => account.id === from);\n    const accountTo = accounts.find(account => account.id === to);\n\n    if (accountFrom && accountTo) {\n      const oldBalancesFrom = accountFrom.balances || new Array<Balance>();\n      const newBalancesFrom = oldBalancesFrom.map(balance => {\n        if (balance.code === currency) {\n          const transactions = balance.transactions || new Array<Transfer>();\n          return {\n            ...balance,\n            value: balance.value - value,\n            transactions: transactions.concat([\n              {\n                date: new Date().toISOString(),\n                sended: true,\n                type: 'TRANSFER',\n                value,\n                currency,\n                to,\n                from,\n                description\n              }\n            ])\n          };\n        }\n        return balance;\n      });\n\n      const oldBalancesTo = accountTo.balances || new Array<Balance>();\n      let newBalancesTo;\n      if (oldBalancesTo.some(balance => balance.code === currency)) {\n        newBalancesTo = oldBalancesTo.map(balance => {\n          if (balance.code === currency) {\n            const transactions = balance.transactions || new Array<Transfer>();\n            return {\n              ...balance,\n              value: balance.value + value,\n              transactions: transactions.concat([\n                {\n                  date: new Date().toISOString(),\n                  sended: false,\n                  type: 'TRANSFER',\n                  value,\n                  currency,\n                  to,\n                  from,\n                  description\n                }\n              ])\n            };\n          }\n          return balance;\n        });\n      } else {\n        newBalancesTo = oldBalancesTo.concat([\n          {\n            value,\n            code: currency,\n            transactions: [\n              {\n                date: new Date().toISOString(),\n                sended: false,\n                type: 'TRANSFER',\n                value,\n                currency,\n                to,\n                from,\n                description\n              }\n            ]\n          }\n        ]);\n      }\n      const promises = [\n        FirebaseService.updateData(from, \"accounts\", {\n          ...accountFrom,\n          balances: newBalancesFrom\n        }),\n        FirebaseService.updateData(to, \"accounts\", {\n          ...accountTo,\n          balances: newBalancesTo\n        })\n      ];\n      Promise.all(promises).then(() =>\n        this.props.history.push(urls.accountsList.path)\n      );\n    }\n  };\n\n  render() {\n    const {\n      loading,\n      accounts,\n      from,\n      to,\n      currency,\n      value,\n      description\n    } = this.state;\n\n    console.log(to);\n\n    const account = !!from && accounts.find(account => account.id === from);\n    const balances = account && account.balances ? account.balances : [];\n\n    if (loading) return null;\n\n    return (\n      <React.Fragment>\n        <Card style={{ marginLeft: \"2%\", marginRight: \"2%\", marginTop: \"2%\" }}>\n          <CardContent>\n            <Typography variant=\"headline\" component=\"h2\">\n              Criar transação entre contas\n            </Typography>\n            <form onSubmit={this.submit}>\n              <Select\n                value={from}\n                onChange={e =>\n                  this.setState({ from: e.target.value, to: \"\", currency: \"\" })\n                }\n                displayEmpty\n                fullWidth\n                name=\"De\"\n                style={{\n                  marginTop: 16\n                }}\n              >\n                <MenuItem value=\"\">\n                  <em>Selecione a conta que irá enviar</em>\n                </MenuItem>\n                {accounts.map(account => (\n                  <MenuItem value={account.id}>{account.description}</MenuItem>\n                ))}\n              </Select>\n              <Select\n                value={to}\n                onChange={e => this.setState({ to: e.target.value })}\n                disabled={!from}\n                displayEmpty\n                fullWidth\n                name=\"De\"\n                style={{\n                  marginTop: 16\n                }}\n              >\n                <MenuItem value=\"\">\n                  <em>Selecione a conta que irá receber</em>\n                </MenuItem>\n                {accounts\n                  .filter(account => account.id !== from)\n                  .map(account => (\n                    <MenuItem value={account.id}>\n                      {account.description}\n                    </MenuItem>\n                  ))}\n              </Select>\n              <Select\n                value={currency}\n                onChange={e => this.setState({ currency: e.target.value })}\n                disabled={!from}\n                displayEmpty\n                fullWidth\n                name=\"Moeda\"\n                style={{\n                  marginTop: 16\n                }}\n              >\n                <MenuItem value=\"\">\n                  <em>Selecione a moeda da transação</em>\n                </MenuItem>\n                {balances.map(balance => {\n                  const l10n = new Intl.NumberFormat(\"pt-BR\", {\n                    style: \"currency\",\n                    currency: balance.code\n                  });\n                  const currency = currencies.find(\n                    currency => currency.code === balance.code\n                  );\n                  return (\n                    <MenuItem value={balance.code}>\n                      {`${\n                        currency ? currency.singular : balance.code\n                      } (Valor máximo: ${l10n.format(balance.value)})`}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n              <TextField\n                type=\"number\"\n                value={value}\n                label=\"Valor\"\n                fullWidth\n                required\n                style={{\n                  marginTop: 16\n                }}\n                onChange={e => this.setState({ value: +e.target.value })}\n              />\n              <TextField\n                type=\"text\"\n                value={description}\n                label=\"Descrição\"\n                fullWidth\n                required\n                style={{\n                  marginTop: 16\n                }}\n                onChange={e => this.setState({ description: e.target.value })}\n              />\n              <Button\n                type=\"submit\"\n                color=\"primary\"\n                style={{ marginTop: \"20px\", display: \"inline-block\" }}\n              >\n                Transferir\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </React.Fragment>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Button, TextField, Typography, Card, CardContent, Select, MenuItem } from \"@material-ui/core/index\";\nimport FirebaseService from \"../../services/FirebaseService\";\nimport currencies from '../../utils/currencies';\nimport { home } from '../../utils/urls';\n\ninterface Transaction {\n  date: string\n  description: string\n  value: number\n  currency: string\n  from: string\n  sended: boolean\n  type: string\n}\n\ninterface Balance {\n  code: string\n  value: number\n  transactions: Array<Transaction>\n}\n\ninterface Account {\n  id: string\n  description: string\n  balances: Array<Balance>\n}\n\ninterface State {\n  accounts: Array<Account>\n  loading: boolean\n  from: string\n  currency: string\n  description: string\n  value: number\n}\n\ninterface Prop {\n  isEntry?: boolean\n  history?: any\n}\n\nexport default class AccountTransaction extends Component<Prop, State> {\n\n  public readonly state = { loading: true, accounts: new Array<Account>(), from: '', to: '', value: 0, description: '', currency: '' }\n\n  componentWillMount = () => {\n    FirebaseService.getDataList('accounts', (data: any) => {\n      this.setState({ accounts: data, loading: false });\n    });\n  };\n\n  submit = (event: any) => {\n    event.preventDefault();\n    const { accounts, from, description, value, currency } = this.state;\n    const { isEntry } = this.props;\n    const accountFrom = accounts.find(account => account.id === from);\n\n    if (accountFrom) {\n      const oldBalances = accountFrom.balances || new Array<Balance>();\n      let newBalances;\n      if (oldBalances.some(balance => balance.code === currency)) {\n        newBalances = oldBalances.map(balance => {\n          if (balance.code === currency) {\n            const transactions = balance.transactions || new Array<Transaction>();\n            return {\n              ...balance,\n              value: isEntry ? balance.value + value : balance.value - value,\n              transactions: transactions.concat([{ date: new Date().toISOString(), type: 'MOVEMENT', sended: !isEntry, value, currency, from, description }])\n            }\n          }\n          return balance;\n        });\n      } else {\n        newBalances = oldBalances.concat([{\n          value,\n          code: currency,\n          transactions: [{ date: new Date().toISOString(), type: 'MOVEMENT', sended: !isEntry, value, currency, from, description }]\n        }])\n      }\n\n\n      FirebaseService.updateData(from, 'accounts', {\n        ...accountFrom,\n        balances: newBalances,\n      }).then(() => {\n        \n        this.props.history.push(home.path);\n      });\n    }\n  };\n\n  render() {\n\n    const { loading, accounts, from, currency, value, description } = this.state;\n    const { isEntry } = this.props;\n\n    const account = !!from && accounts.find(account => account.id === from);\n    const balances = account && account.balances ? account.balances : [];\n\n    if (loading) return null;\n\n    return (\n      <React.Fragment>\n        <Card style={{ marginLeft: '2%', marginRight: '2%', marginTop: '2%' }}>\n          <CardContent>\n            <Typography variant=\"headline\" component=\"h2\">{!!isEntry ? 'Adicionar Entrada' : 'Adicioanr Saída'}</Typography>\n            <form onSubmit={this.submit}>\n              <Select\n                value={from}\n                onChange={e => this.setState({ from: e.target.value, currency: '' })}\n                displayEmpty\n                fullWidth\n                name=\"De\"\n                style={{\n                  marginTop: 16,\n                }}\n              >\n                <MenuItem value=\"\">\n                  <em>Selecione a conta</em>\n                </MenuItem>\n                {accounts.map(account => (\n                  <MenuItem value={account.id}>\n                    {account.description}\n                  </MenuItem>\n                ))}\n              </Select>\n              <Select\n                value={currency}\n                onChange={e => this.setState({ currency: e.target.value })}\n                disabled={!from}\n                displayEmpty\n                fullWidth\n                name=\"Moeda\"\n                style={{\n                  marginTop: 16,\n                }}\n              >\n                <MenuItem value=\"\">\n                  <em>Selecione a moeda</em>\n                </MenuItem>\n                {!isEntry && balances.map(balance => {\n                  const l10n = new Intl.NumberFormat(\"pt-BR\", { style: \"currency\", currency: balance.code });\n                  const currency = currencies.find(currency => currency.code === balance.code);\n                  return (\n                    <MenuItem value={balance.code}>\n                      {`${currency ? currency.singular : balance.code} (Valor máximo: ${l10n.format(balance.value)})`}\n                    </MenuItem>\n                  )\n                })}\n                {isEntry && currencies.map(currency => {\n                  return (\n                    <MenuItem value={currency.code}>\n                      {currency.singular}\n                    </MenuItem>\n                  )\n                })}\n              </Select>\n              <TextField\n                type=\"number\"\n                value={value}\n                label=\"Valor\"\n                fullWidth\n                required\n                style={{\n                  marginTop: 16,\n                }}\n                onChange={e => this.setState({ value: +e.target.value })} />\n              <TextField\n                type=\"text\"\n                value={description}\n                label=\"Descrição\"\n                fullWidth\n                required\n                style={{\n                  marginTop: 16,\n                }}\n                onChange={e => this.setState({ description: e.target.value })} />\n              <Button type=\"submit\" color='primary'\n                style={{ marginTop: '20px', display: 'inline-block' }}>\n                {!!isEntry ? 'Adicionar entrada' : 'Adicionar saída'}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </React.Fragment>\n    );\n  }\n}","import React, { Component } from 'react';\nimport EntryOrOut from './components/EntryOrOut';\n\nexport default class AccountEntry extends Component {\n  render() {\n    return (\n      <EntryOrOut isEntry {...this.props} />\n    );\n  }\n}","import React, { Component } from 'react';\nimport EntryOrOut from './components/EntryOrOut';\n\nexport default class AccountOut extends Component {\n  render() {\n    return (\n      <EntryOrOut {...this.props} />\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {\n  Typography,\n  Card,\n  CardContent,\n  CardActionArea\n} from \"@material-ui/core/index\";\nimport urls from \"../utils/urls\";\n\ninterface Props {\n  history?: any;\n}\n\ninterface MenuItem {\n  name: string;\n  path: string;\n}\n\nconst keys = Object.keys(urls);\n// @ts-ignore\nconst menuItems: Array<MenuItem> = (keys || []).map((key: string) => urls[key]);\n\nclass Home extends Component<Props> {\n  MenuRenderer = (menuItem: MenuItem) => {\n    return (\n      <Card style={{ margin: \"16px\" }}>\n        <CardActionArea onClick={() => this.props.history.push(menuItem.path)}>\n          <CardContent>\n            <Typography variant=\"headline\" component=\"h2\">\n              {menuItem.name}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    );\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {menuItems.map(menuItem => (\n          <this.MenuRenderer\n            key={menuItem.path}\n            name={menuItem.name}\n            path={menuItem.path}\n          />\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport {\n  Typography,\n  Table,\n  TableHead,\n  TableBody,\n  TableCell,\n  TableRow\n} from \"@material-ui/core/index\";\nimport FirebaseService from \"../services/FirebaseService\";\nimport withWidth from \"@material-ui/core/withWidth\";\nimport moment from \"moment\";\n\ninterface Transaction {\n  date: Date;\n  description: string;\n  value: number;\n  quotation: number;\n  currency: string;\n  to: string;\n  from: string;\n  sended: boolean;\n  type: string;\n}\n\ninterface Balance {\n  code: string;\n  value: number;\n  transactions: Array<Transaction>;\n}\n\ninterface Account {\n  id: string;\n  description: string;\n  balances: Array<Balance> | null;\n}\ninterface State {\n  account: Account | null;\n  loading: boolean;\n}\n\nclass AccountReport extends Component<any, State> {\n  public readonly state = { account: null, loading: true };\n\n  componentWillMount = () => {\n    const { id } = this.props.match.params;\n\n    FirebaseService.getUniqueDataBy(\"accounts\", id, (data: Account) => {\n      this.setState({ account: { ...data, id }, loading: false });\n    });\n  };\n\n  //@ts-ignore\n  sortFunction = (a: Transaction, b: Transaction) => + (b.date > a.date) - (b.date < a.date);\n\n  render() {\n    const { code } = this.props.match.params;\n    const { account, loading } = this.state;\n\n    if (loading || !account) return null;\n\n    //@ts-ignore\n    const { balances = [] } = account || {};\n    const transactions = (balances || []).reduce(\n      //@ts-ignore\n      (acc, value: Balance) => acc.concat(value.transactions || []),\n      new Array<Transaction>()\n    );\n\n    const filtredTransactions = transactions\n        .filter((transaction: Transaction) =>\n            transaction.currency === code &&\n            transaction.type === 'TRANSACTION' &&\n            //@ts-ignore\n            transaction.to === account.id &&\n            transaction.sended\n        );\n\n    //@ts-ignore\n    if (!filtredTransactions || !filtredTransactions.length) {\n        return (\n            <div style={{padding: 16}}>\n                <p>Sem transações de venda</p>\n            </div>\n        );\n    }\n\n    const totalValue = filtredTransactions.reduce((sum: number, transaction: Transaction) => {\n        return sum + transaction.value;\n    }, 0);\n\n    const quotationAvarage = filtredTransactions.reduce((sum: number, transaction: Transaction) => {\n        return sum + (transaction.value * transaction.quotation);\n    }, 0);\n\n    const l10n = new Intl.NumberFormat(\"pt-BR\", {\n        style: \"currency\",\n        currency: filtredTransactions[0].currency\n    });\n\n    const currency = filtredTransactions[0].currency;\n\n    return (\n      <div style={{ paddingBottom: 16 }}>\n        {!!transactions && !!transactions.length && (\n          <React.Fragment>\n            <Typography\n              style={{ padding: 8 }}\n              variant=\"headline\"\n              component=\"h2\"\n            >\n              Movimentações vinculadas com essa conta\n            </Typography>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Data</TableCell>\n                  <TableCell>Moeda</TableCell>\n                  <TableCell>Valor</TableCell>\n                  <TableCell>Cotação</TableCell>\n                  <TableCell>Tipo</TableCell>\n                  <TableCell>Descrição</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filtredTransactions\n                    .sort(this.sortFunction)\n                    .map((transaction: Transaction, index: number) => {\n                 \n                  let type;\n                  if (transaction.type === 'INITIAL') {\n                    type = 'Depósto inicial';\n                  } else if (transaction.type === 'MOVEMENT') {\n                    if (transaction.sended) type = 'Saída';\n                    if (!transaction.sended) type = 'Entrada';\n                  } else if (transaction.type === 'TRANSFER') {\n                    if (transaction.sended) type = 'Transferência - Saída';\n                    if (!transaction.sended) type = 'Transferência - Entrada';\n                  } else if (transaction.type === 'TRANSACTION') {\n                    if (transaction.sended) type = 'Compra - Saída';\n                    if (!transaction.sended) type = 'Compra - Entrada';\n                  }\n                  return (\n                    <TableRow key={transaction.currency + transaction.date + index} >\n                      <TableCell>{moment(transaction.date).format(\"DD/MM/YYYY HH:MM\")}</TableCell>\n                      <TableCell>{transaction.currency}</TableCell>\n                      <TableCell>{l10n.format(transaction.value)}</TableCell>\n                      <TableCell>{transaction.quotation}</TableCell>\n                      <TableCell>{type}</TableCell>\n                      <TableCell>{transaction.description}</TableCell>\n                    </TableRow>\n                  );\n                })}\n                <TableRow key=\"last\" style={{backgroundColor: '#EEE'}}>\n                    <TableCell style={{fontWeight: 'bold'}}>Média</TableCell>\n                    <TableCell style={{fontWeight: 'bold'}}>{currency}</TableCell>\n                    <TableCell style={{fontWeight: 'bold'}}>{l10n.format(totalValue)}</TableCell>\n                    <TableCell style={{fontWeight: 'bold'}}>{quotationAvarage / totalValue}</TableCell>\n                    <TableCell style={{fontWeight: 'bold'}}>-</TableCell>\n                    <TableCell style={{fontWeight: 'bold'}}>-</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withWidth()(AccountReport);\n","import React from \"react\";\nimport AccountForm from \"./views/AccountForm\";\nimport AccountList from \"./views/AccountList\";\nimport AccountTransaction from \"./views/AccountTransaction\";\nimport AccountTransactionsList from \"./views/AccountTransactionsList\";\nimport AccountTransfer from \"./views/AccountTransfer\";\nimport AccountEntry from \"./views/AccountEntry\";\nimport AccountOut from \"./views/AccountOut\";\nimport Home from \"./views/Home\";\nimport AccountReport from \"./views/AccountReport\";\nimport urls, {\n  accountsEdit,\n  home,\n  accountTransactionsList,\n  report\n} from \"./utils/urls\";\nimport {\n  Typography,\n  IconButton,\n  AppBar,\n  Toolbar\n} from \"@material-ui/core/index\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { Route, Link } from \"react-router-dom\";\n\nconst App: React.FC = () => {\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\" style={{ marginBottom: 16 }}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"Menu\"\n            component={props => <Link to={`${home.path}`} {...props} />}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Controle de carteiras\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Route exact path={home.path} render={props => <Home {...props} />} />\n\n      <Route\n        exact\n        path={accountsEdit.path}\n        render={props => <AccountForm {...props} />}\n      />\n\n      <Route\n        exact\n        path={urls.accountsList.path}\n        render={props => <AccountList {...props} />}\n      />\n\n      <Route\n        exact\n        path={urls.accountsTransaction.path}\n        render={props => <AccountTransaction {...props} />}\n      />\n\n      <Route\n        exact\n        path={accountTransactionsList.path}\n        render={props => <AccountTransactionsList {...props} />}\n      />\n\n      <Route\n        exact\n        path={urls.accountsTransfer.path}\n        render={props => <AccountTransfer {...props} />}\n      />\n\n      <Route\n        exact\n        path={urls.accountsEntry.path}\n        render={props => <AccountEntry {...props} />}\n      />\n\n      <Route\n        exact\n        path={urls.accountsOut.path}\n        render={props => <AccountOut {...props} />}\n      />\n\n      <Route\n        exact\n        path={urls.accountsForm.path}\n        render={props => <AccountForm {...props} />}\n      />\n\n      <Route\n        exact\n        path={report.path}\n        render={props => <AccountReport {...props} />}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { home } from \"./utils/urls\";\n\nReactDOM.render(\n  <Router>\n    <Route path={home.path} component={App} />\n  </Router>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}